// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator crud_generator {
//   provider = "prisma-generator-nestjs-crud"
//   output   = "../src"
// }
// 유저 정보를 저장하는 테이블

model User {
  id           Int           @id @default(autoincrement())
  password     String
  type         String
  description  String?
  uid          String
  name         String
  phone        String
  email        String
  role         String
  image        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  products     Product[] // 해당 유저가 등록한 상품들 
  likes        ProductLike[] // 해당 유저가 좋아하는 상품들
  keywords     Keyword[]
  chatJoins    ChatJoin[]
  chatMessages ChatMessage[]

  @@map("user")
}

// 중고물품 카테고리 정보를 저장하는 테이블
model Category {
  id       Int        @id @default(autoincrement())
  name     String
  parent   Category?  @relation("ChildCategories", fields: [parentId], references: [id])
  parentId Int?       @map("parent_id")
  children Category[] @relation("ChildCategories") // 자식 카테고리들
  products Product[] // 해당 카테고리에 속한 상품들

  @@map("category")
}

// 중고물품 브랜드 정보를 저장하는 테이블
model Brand {
  id       Int       @id @default(autoincrement())
  name     String
  parent   Brand?    @relation("ChildBrands", fields: [parentId], references: [id])
  parentId Int?      @map("parent_id")
  children Brand[]   @relation("ChildBrands") // 자식 브랜드들
  products Product[] // 해당 브랜드의 상품들

  @@map("brand")
}

// 중고물품 정보를 저장하는 테이블
model Product {
  id               Int              @id @default(autoincrement())
  name             String
  description      String
  price            Int
  viewCount        Int              @default(0) @map(name: "view_count")
  chatCount        Int              @default(0) @map(name: "chat_count")
  likeCount        Int              @default(0) @map(name: "like_count")
  isHidden         Boolean          @default(false) @map(name: "is_hidden")
  hideAt           DateTime?        @map(name: "hide_at")
  createdAt        DateTime         @default(now()) @map(name: "created_at")
  updatedAt        DateTime         @default(now()) @updatedAt @map(name: "updated_at")
  deletedAt        DateTime?        @map(name: "deleted_at")
  transactionType  TransactionType  @map(name: "transaction_type")
  transactionState TransactionState @map(name: "transaction_state")
  completedAt      DateTime?        @map(name: "completed_at")
  category         Category?        @relation(fields: [categoryId], references: [id])
  categoryId       Int?             @map("category_id")
  brand            Brand?           @relation(fields: [brandId], references: [id])
  brandId          Int?             @map("brand_id")
  createdBy        User             @relation(fields: [createdById], references: [id])
  createdById      Int              @map("created_by_id")
  likes            ProductLike[] // 해당 상품을 좋아하는 사용자들
  tags             Tag[] // 상품에 연관된 태그들
  images           ProductImage[] // 상품 이미지들 
  chats            Chat[]

  @@map("product")
}

// 중고물품 이미지 정보를 저장하는 테이블
model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])

  @@map("product_image")
}

// 중고물품 채팅 정보를 저장하는 테이블
model Chat {
  id           Int           @id @default(autoincrement())
  product      Product       @relation(fields: [productId], references: [id])
  productId    Int           @map("product_id")
  chatMessages ChatMessage[]
  chatJoins    ChatJoin[]

  @@map("chat")
}

model ChatJoin {
  id     Int  @id @default(autoincrement())
  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int  @map("chat_id")
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  @@map("chat_join")
}

// 채팅 메시지 정보를 저장하는 테이블
model ChatMessage {
  id        Int         @id @default(autoincrement())
  chat      Chat        @relation(fields: [chatId], references: [id])
  chatId    Int         @map("chat_id")
  user      User        @relation(fields: [userId], references: [id])
  userId    Int         @map("user_id")
  message   String
  type      MessageType @default(STRING)
  createdAt DateTime    @default(now())

  @@map("chat_message")
}

// 상품 좋아요 정보를 저장하는 테이블
model ProductLike {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int     @map("user_id")
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@map("product_like")
}

// 태그 정보를 저장하는 테이블
model Tag {
  id        Int     @id @default(autoincrement())
  name      String
  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@map("tag")
}

// 키워드 정보를 저장하는 테이블
model Keyword {
  id     Int    @id @default(autoincrement())
  word   String
  userId Int?   @map("user_id")
  user   User?  @relation(fields: [userId], references: [id])

  @@map("keyword")
}

model Sigungu {
  id       Int    @id
  level    Int
  location String
  parentId Int?   @map("parent_id")

  @@map("sigungu")
}

// schema.prisma

// 거래 유형을 나타내는 열거형
enum TransactionType {
  SALE // 판매
  EXCHANGE // 교환
  PURCHASE // 구매
  FREE // 나눔
}

// 거래 상태를 나타내는 열거형
enum TransactionState {
  ONGOING // 진행 중
  COMPLETED // 완료됨
  CANCELLED // 취소됨
}

enum MessageType {
  STRING
  IMAGE
}
